package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import sun.awt.X11.XSystemTrayPeer;

import java.util.List;
import java.util.Optional;

@Service
public class TraderAccountService {

    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao, SecurityOrderDao securityOrderDao){
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * create a new trader and initialyze a new accont with 0 amount
     * -validate user input (allfields must be non empty)
     * - create a trader
     * - create an account
     * - create, setup and return a new trader accountView.
     *
     * Assumption: to simplify the logic, wach trader has only one account where traderId == accountId
     *
     * @param trader cannot be null, all fields cannot be null except for id (autogenerated)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has nll fields or id is not null.
     */
    public TraderAccountView createTraderAndAccount(Trader trader){
        if (!validateTrader(trader)){
            throw new IllegalArgumentException("trader has null fields or id is not null");
        }
        Trader savedTrader = traderDao.save(trader);
        Account account = new Account();
        account.setId(savedTrader.getId());
        account.setTrader_id(savedTrader.getId());
        account.setAmount(0d);
        Account savedAccount = accountDao.save(account);
       return new TraderAccountView(savedTrader, savedAccount);
    }

    /**
     * helper method to validate trader
     * @param trader
     * @return boolean
     */
    private boolean validateTrader(Trader trader){
        if (trader.getCountry() == null || trader.getDob() == null || trader.getEmail() == null || trader.getFirst_name() == null || trader.getLast_name() == null){
            return false;
        }
        else {
            return true;
        }
    }

    /**
     * A trader can be deleted iff it has no open position and 0 cash balance
     * - validate traderId;
     * - get trader account by traderId and check account balance
     * - get positions by accountId and check positions
     * - delete all security orders, account, trader (in this order)
     * @param traderId
     * @throws IllegalArgumentException if traderid is null or not found or unable to delete
     */
    public void deleteTraderById(Integer traderId){
        if (traderId == null){
            throw new IllegalArgumentException("traderId cannot be null");
        }
        if (!traderDao.existsById(traderId)){
             throw new IllegalArgumentException("trader id does not exist");
        }
        Trader trader = traderDao.findById(traderId).get();
        Account account = accountDao.findById(trader.getId()).get();
        if (account.getAmount() !=0){
            throw new IllegalArgumentException("account balance is not 0");
        }
        Optional<Position> position = positionDao.findById(account.getId());
        if (position.isPresent()){
            if (position.get().getPosition() != 0){
                throw new IllegalArgumentException("there are still open position");
            }
        }
        List<SecurityOrder> orders = securityOrderDao.findAll();
        if (orders.size() != 0) {
            for (SecurityOrder order : orders) {
                if (order.getAccount_id() == account.getId()) {
                    securityOrderDao.deleteById(order.getId());
                }
            }
        }
        accountDao.deleteById(account.getId());
        traderDao.deleteById(trader.getId());
    }

    /**
     * Deposit a fund to an account by traderId
     * -validate user nput
     * - account = accountDao.findbytraderid
     * - accountdap.updateAmountByid
     *
     * @param traderId must not be null
     * @param fund must be greater than 0;
     * @return updated Account;
     * @throws IllegalArgumentException if trader is null or not found and fund is less or equal to 0
     */
    public Account deposit(Integer traderId, Double fund){
        if (traderId == null || fund == 0d){
            throw new IllegalArgumentException("trader must not be null and fund myst be greater than 0");
        }
        if (!traderDao.existsById(traderId)){
            throw new IllegalArgumentException("trader id does not exist");
        }
        Account account = accountDao.findById(traderId).get();
        account.setAmount(account.getAmount()+fund);
        Integer num = accountDao.updateByAccount(account);
        return account;
    }

    /**
     * withdraw a fund to an account by traderid
     * - validate user input
     * - account = accountDap.findbytraderId;
     * - accountdao.updateAmountbyId
     *
     * @param traderId
     * @param fund
     * @return
     */
    public Account withdraw(Integer traderId, Double fund){
        if (traderId == null || fund == 0d){
            throw new IllegalArgumentException("trader must not be null and fund myst be greater than 0");
        }
        if (!traderDao.existsById(traderId)){
            throw new IllegalArgumentException("trader id does not exist");
        }
        Account account = accountDao.findById(traderId).get();
        if (account.getAmount() < fund){
            throw new IllegalArgumentException("not enough funds in account to withdraw");
        }
        account.setAmount(account.getAmount()-fund);
        Integer num = accountDao.updateByAccount(account);
        return account;
    }
}
