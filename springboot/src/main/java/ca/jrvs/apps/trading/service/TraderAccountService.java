package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao, SecurityOrderDao securityOrderDao){
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * create a new trader and initialyze a new accont with 0 amount
     * -validate user input (allfields must be non empty)
     * - create a trader
     * - create an account
     * - create, setup and return a new trader accountView.
     *
     * Assumption: to simplify the logic, wach trader has only one account where traderId == accountId
     *
     * @param trader cannot be null, all fields cannot be null except for id (autogenerated)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has nll fields or id is not null.
     */
    public TraderAccountView createTraderAndAccount(Trader trader){

    }

    /**
     * A trader can be deleted iff it has no open position and 0 cash balance
     * -validate traderId;
     * - get trader account by traderId and check account balance
     * -get positions by accountId and check positions
     * - delete all security orders, account, trader (in this order)
     * @param traderId
     */
    public void deleteTraderById(Integer traderId){

    }

    /**
     * Deposit a fund to an account by traderId
     * -validate user nput
     * - account = accountDap.findbytraderid
     * - accountdap.updateAmountByid
     *
     * @param traderId must not be null
     * @param fund must be greater than 0;
     * @return updated Account;
     * @throws IllegalArgumentException if trader is null or not found and fund is less or equal to 0
     */
    public Account deposit(Integer traderId, Double fund){

    }

    /**
     * withdraw a fund to an account by traderid
     * - validate user input
     * - account = accountDap.findbytraderId;
     * - accountdao.updateAmountbyId
     *
     * @param traderId
     * @param fund
     * @return
     */
    public Account withdraw(Integer traderId, Double fund){

    }
}
